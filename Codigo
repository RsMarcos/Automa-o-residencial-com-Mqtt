#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Credenciais Wifi
const char* Usuario = ""
const char* senha = ""; 

// host e porta do broker
const char* BROKER_MQTT = "iot.eclipse.org";
int BROKER_PORT = 1883;

void initPins();
void initSerial();
void initWiFi();
void initMQTT();

WiFiClient espClient;
// instancia o mqtt
PubSubClient MQTT(espClient); 

void setup() {
  initPins();
  initSerial();
  initWiFi();
  initMQTT();
}

void loop() {
  if (!MQTT.connected()) {
    reconnectMQTT();
  }
  recconectWiFi();
  MQTT.loop();
}

void initPins() {
  pinMode(D4, OUTPUT);
  digitalWrite(D4, 0);
}

void initSerial() {
  Serial.begin(115200);
}
void initWiFi() {
  delay(10);

  WiFi.begin(Usuario, senha);
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
  }
  Serial.println();
  Serial.print("Conectado na Rede " + String(Usuario) + " | IP => ");
  Serial.println(WiFi.localIP());
}

// Funcão para se conectar ao Broker MQTT
void initMQTT() {
  MQTT.setServer(BROKER_MQTT, BROKER_PORT);
  MQTT.setCallback(mqtt_callback);
}

//Função que recebe as mensagens publicadas
void mqtt_callback(char* topic, byte* payload, unsigned int length) {

  String message;
  for (int i = 0; i < length; i++) {
    char c = (char)payload[i];
    message += c;
  }
  Serial.println("Tópico => " + String(topic) + " | Valor => " + String(message));
  if (message == "1") {
    digitalWrite(D4, 1);
  } else {
    digitalWrite(D4, 0);
  }
  Serial.flush();
}

void reconnectMQTT() {
  while (!MQTT.connected()) {
    if (MQTT.connect("ESP8266-proje/mqtt")) {
      MQTT.subscribe("seu topic aqui");

    } else {
      delay(2000);
    }
  }
}

void recconectWiFi() {
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
  }
}
